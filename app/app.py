# AUTOGENERATED! DO NOT EDIT! File to edit: ../04_ch_pt_2.ipynb.

# %% auto 0
__all__ = ['mnist_path', 'nines', 'sixes', 'nines_tens', 'sixes_tens', 'stacked_nines', 'stacked_sixes', 'mean_stacked_nines',
           'mean_stacked_sixes', 'im_9', 'im_6', 'valid_nines_tens', 'valid_sixes_tens', 'train_x', 'train_y', 'dset',
           'x', 'y', 'valid_x', 'valid_y', 'valid_dset', 'weights', 'bias', 'preds', 'corrects', 'dl', 'xb', 'yb',
           'valid_dl', 'init_params', 'linear1', 'mnist_loss']

# %% ../04_ch_pt_2.ipynb 2
from ipywidgets import interact
from fastai.vision import *
from fastbook import *

matplotlib.rc('image', cmap='Greys')
plt.rc('figure', dpi=90)


# %% ../04_ch_pt_2.ipynb 5
mnist_path = untar_data(URLs.MNIST)

# %% ../04_ch_pt_2.ipynb 6
Path.BASE_PATH = mnist_path

# %% ../04_ch_pt_2.ipynb 10
nines = (mnist_path/'training'/'9').ls().sorted()
sixes = (mnist_path/'training'/'6').ls().sorted()

# %% ../04_ch_pt_2.ipynb 15
nines_tens = [tensor(Image.open(o)) for o in nines]
sixes_tens = [tensor(Image.open(o)) for o in sixes]

# %% ../04_ch_pt_2.ipynb 17
stacked_nines = torch.stack(nines_tens).float()/255
stacked_sixes = torch.stack(sixes_tens).float()/255

# %% ../04_ch_pt_2.ipynb 20
mean_stacked_nines = stacked_nines.mean(0)
mean_stacked_sixes = stacked_sixes.mean(0)

# %% ../04_ch_pt_2.ipynb 23
im_9 = stacked_nines[2]
im_6 = stacked_sixes[2]

# %% ../04_ch_pt_2.ipynb 36
valid_nines_tens = torch.stack([tensor(Image.open(o))
                                for o in (mnist_path/'testing'/'9').ls()])
valid_sixes_tens = torch.stack([tensor(Image.open(o))
                                for o in (mnist_path/'testing'/'6').ls()])
valid_nines_tens = valid_nines_tens.float()/255
valid_sixes_tens = valid_sixes_tens.float()/255
valid_nines_tens.shape, valid_sixes_tens.shape                                

# %% ../04_ch_pt_2.ipynb 128
train_x = torch.cat([stacked_nines, stacked_sixes]).view(-1, 28*28)

# %% ../04_ch_pt_2.ipynb 132
train_y = tensor([1]*len(nines) + [0]*len(sixes)).unsqueeze(1)

# %% ../04_ch_pt_2.ipynb 140
dset = list(zip(train_x, train_y))
x,y = dset[0]

# %% ../04_ch_pt_2.ipynb 144
valid_x = torch.cat([valid_nines_tens, valid_sixes_tens]).view(-1,784)

# %% ../04_ch_pt_2.ipynb 146
valid_y = tensor([1]*len(valid_nines_tens) + [0]*len(valid_sixes_tens)).unsqueeze(1)

# %% ../04_ch_pt_2.ipynb 148
valid_dset = list(zip(valid_x, valid_y))

# %% ../04_ch_pt_2.ipynb 150
x, y = dset[0]

# %% ../04_ch_pt_2.ipynb 153
def init_params(size, std=1.0):
    return (torch.randn(size)*std).requires_grad_()

# %% ../04_ch_pt_2.ipynb 154
weights = init_params(28*28)

# %% ../04_ch_pt_2.ipynb 156
bias = init_params(1)

# %% ../04_ch_pt_2.ipynb 160
def linear1(xb):
    return xb@weights + bias

# %% ../04_ch_pt_2.ipynb 161
preds = linear1(train_x)

# %% ../04_ch_pt_2.ipynb 165
corrects = (preds>0.0).float() == train_y
print(corrects), len(corrects)


# %% ../04_ch_pt_2.ipynb 166
with torch.no_grad(): weights[0] *= 1.0001

# %% ../04_ch_pt_2.ipynb 167
preds = linear1(train_x)
((preds>0.0).float() == train_y).float().mean().item()

# %% ../04_ch_pt_2.ipynb 179
def mnist_loss(predictions, targets):
    predictions = predictions.sigmoid()
    return torch.where(targets==1, 1-predictions, predictions).mean()


# %% ../04_ch_pt_2.ipynb 187
weights = init_params((28*28,1))
bias = init_params(1)


# %% ../04_ch_pt_2.ipynb 189
dl = DataLoader(dset, batch_size=256)
xb, yb = first(dl)
xb.shape, yb.shape

# %% ../04_ch_pt_2.ipynb 191
valid_dl = DataLoader(valid_dset, batch_size=256)
